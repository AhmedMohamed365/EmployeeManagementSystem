# Generated by Django 4.2.17 on 2024-12-12 09:35

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Enter a unique username', max_length=50, unique=True)),
                ('email', models.EmailField(help_text='Enter a valid email address', max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('manager', 'Manager'), ('editor', 'Editor'), ('viewer', 'Viewer')], default='viewer', help_text='Select user role', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user account should be treated as active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can access the admin site')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the user account was created')),
                ('last_login', models.DateTimeField(blank=True, help_text="Date and time of the user's last login", null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
                'permissions': [('view_user_details', 'Can view user details'), ('edit_user_role', 'Can edit user role')],
            },
        ),
    ]
